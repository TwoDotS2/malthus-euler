# -*- coding: utf-8 -*-
"""Malthus_Euler.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XBfd722ONw2gdKR9l8TgSzydw2kDv4N1
"""

# import matplotlib.pyplot as plt
# import plotly.express as px
import numpy as np
import math

# 1500e^(50t)
def equacao_exata(passo, constante):
  return 1500 * pow(math.e, passo * constante)

# y_k+1 = y_k + h * y_k * r
def aproximacao_numerica(atual, passo, constante):
  return atual + passo * atual * constante

# Vetores
n = 100
x = np.arange(n+1).astype('float64') # Dominio
y = np.arange(n+1).astype('float64') # Imagem (Aproximada)
Y = np.arange(n+1).astype('float64') # Imagem (Real)
e = np.arange(n+1).astype('float64') # Erro

# Variáveis
r = 50 # Constante de propocionalidade
xI = 0.0 
xF = 10.0
soma = 0.0

# Definir o "passo"
h = (xF - xI)/n
x[0] = xI
y[0] = 1500.0
Y[0] = 1500.0

# Definir os pontos do domínio 
for i in range(1, n + 1):
  x[i] = i * h

# Definir os pontos da imagem
for i in range(1, n + 1):
  y[i] = aproximacao_numerica(y[i-1], h, r)
  Y[i] = equacao_exata(x[i], r)


# o que isso significa? 
# y[n] = aproximacao_numerica(y[n-1], n, r)

# Abrir arquivo
# E salvar valores no arquivo
nome_arquivo = "values({r}).txt".format(r = r)
arq = open(nome_arquivo, "w") 

for i in range(0, n + 1):
  e[i] = math.fabs(y[i] - Y[i]) / math.fabs(y[i])
  str = "{x:.5f} \t {y:.5f} \t {Y:.5f}\n".format(x = x[i], y = y[i], Y = Y[i])
  arq.write(str)

arq.close()

for i in range (0, n + 1):
  soma += e[i]*e[i]


# Salvar a soma dos erros
str = "Soma dos erros: {soma}".format(soma = soma)

print(str)

# Gráfico
#plt.plot(x, y, marker=",")
#plt.plot(x, Y, marker=",")
#plt.xlim([0, 1.5])
#plt.ylim([0.5, 2])
#plt.show()
